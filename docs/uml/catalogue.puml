@startuml

note top of DataServiceRegistry
Plugins can extend
by adding new data services
end note

note top of DataStoreRegistry
Plugins can extend
by adding new data stores
end note

note top of DataService
Instance (Web API) of some existing
data service.
- https://www.sentinel-hub.com/
- https://scihub.copernicus.eu/
- http://cci.esa.int/data
- geoDB instance
- xcube Server instance
- Bucket in object storage + metadata
- Directory in network filesystem + metadata
end note

class DataCatalogue {
    find_datasets(query): List[DatasetDescriptor]
}

class DataServiceRegistry {
    get_data_services(): List[DataService]
    get_data_service(id): DataService
    add_data_service(DataService)
    remove_data_service(id)
}

interface DataService {
    id: str
    description: str
    credentials: Mapping[str, str]
}

interface DataServiceCapabilities {
    can_open: bool
    can_add: bool
    can_insert_slice: bool
    can_append_slice: bool
    ...
}

interface DatasetDescriptor {
    id: str
    uri: str
    store_id: str
    metadata: Mapping[str, Any]
    {abstract} get_variables(): List[VariableDescriptor]
}

interface VariableDescriptor {
    datatype: str
    metadata: Mapping[str, Any]
    {abstract} get_dimensions(): List[DimensionMetadata]
}

class DataStoreRegistry {
    get_data_stores(): List[DataStore]
    get_data_store(id): DataStore
    add_data_store(DataStore): void
    remove_data_store(id): void
}

interface DataStore {
    id: str

    {abstract} find_datasets(query): List[DatasetDescriptor]

    {abstract} get_dataset_schema(descriptor: DatasetDescriptor, **params): DatasetSchema
    {abstract} open_dataset(descriptor: DatasetDescriptor, **params): xr.Dataset

    {abstract} add_dataset(descriptor: DatasetDescriptor, dataset: xr.Dataset)
    {abstract} update_dataset(descriptor: DatasetDescriptor, dataset: xr.Dataset)
    {abstract} remove_dataset(id: str)

    {abstract} insert_dataset_slice(descriptor: DatasetDescriptor, dataset: xr.Dataset, index)
    {abstract} append_dataset_slice(descriptor: DatasetDescriptor, dataset: xr.Dataset, index)
    {abstract} update_dataset_slice(descriptor: DatasetDescriptor, dataset: xr.Dataset, index)
    {abstract} remove_dataset_slice(descriptor: DatasetDescriptor, dataset: xr.Dataset, index)
}

class LocalZarrDataStore implements DataStore {
}

class S3ZarrDataStore implements DataStore {
}

class CciOdpDataStore implements DataStore {
}

class SentinelHubDataStore implements DataStore {
}

DataCatalogue  ..>  DataServiceRegistry: <use>
DataCatalogue  ..>  DatasetDescriptor: <provide>
DataService  o-->  " 1   " DataStore
DataService  o-->  " 1   " DataServiceCapabilities
DatasetDescriptor o--> " N   " VariableDescriptor
DataStore ..> DatasetDescriptor: <use>
DatasetDescriptor ..> DataStore: <know>

DataStoreRegistry --> " N   " DataStore
DataServiceRegistry --> " N   " DataService


@enduml