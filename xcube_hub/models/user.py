# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from xcube_hub.models.base_model_ import Model
from xcube_hub import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, user_id: str = None, email: str = None, username: str = None, password: str = None,
                 nickname: str = None, connection: str = None,
                 created_at: datetime = None, updated_at: datetime = None, given_name: str = None,
                 family_name: str = None, app_metadata: object = None, user_metadata: object = None):  # noqa: E501
        """User - a model defined in Swagger

        :param user_id: The user_id of this User.  # noqa: E501
        :type user_id: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param nickname: The nickname of this User.  # noqa: E501
        :type nickname: str
        :param created_at: The created_at of this User.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this User.  # noqa: E501
        :type updated_at: datetime
        :param given_name: The given_name of this User.  # noqa: E501
        :type given_name: str
        :param family_name: The family_name of this User.  # noqa: E501
        :type family_name: str
        :param app_metadata: The app_metadata of this User.  # noqa: E501
        :type app_metadata: object
        :param user_metadata: The user_metadata of this User.  # noqa: E501
        :type user_metadata: object
        :param connection: The user_metadata of this User.  # noqa: E501
        :type connection: str
        """
        self.swagger_types = {
            'user_id': str,
            'email': str,
            'username': str,
            'password': str,
            'nickname': str,
            'created_at': datetime,
            'updated_at': datetime,
            'given_name': str,
            'family_name': str,
            'app_metadata': object,
            'user_metadata': object,
            'connection': str
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'email': 'email',
            'username': 'username',
            'password': 'password',
            'nickname': 'nickname',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'given_name': 'given_name',
            'family_name': 'family_name',
            'app_metadata': 'app_metadata',
            'user_metadata': 'user_metadata',
            'connection': 'connection'
        }
        self._user_id = user_id
        self._email = email
        self._username = username
        self._password = password
        self._nickname = nickname
        self._created_at = created_at
        self._updated_at = updated_at
        self._given_name = given_name
        self._family_name = family_name
        self._app_metadata = app_metadata
        self._user_metadata = user_metadata
        self._connection = connection

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this User.


        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the username of this User.


        :param password: The username of this User.
        :type password: str
        """

        self._password = password

    @property
    def nickname(self) -> str:
        """Gets the nickname of this User.


        :return: The nickname of this User.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname: str):
        """Sets the nickname of this User.


        :param nickname: The nickname of this User.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this User.


        :return: The created_at of this User.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this User.


        :param created_at: The created_at of this User.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this User.


        :return: The updated_at of this User.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this User.


        :param updated_at: The updated_at of this User.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def given_name(self) -> str:
        """Gets the given_name of this User.


        :return: The given_name of this User.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name: str):
        """Sets the given_name of this User.


        :param given_name: The given_name of this User.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def family_name(self) -> str:
        """Gets the family_name of this User.


        :return: The family_name of this User.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name: str):
        """Sets the family_name of this User.


        :param family_name: The family_name of this User.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def app_metadata(self) -> object:
        """Gets the app_metadata of this User.


        :return: The app_metadata of this User.
        :rtype: object
        """
        return self._app_metadata

    @app_metadata.setter
    def app_metadata(self, app_metadata: object):
        """Sets the app_metadata of this User.


        :param app_metadata: The app_metadata of this User.
        :type app_metadata: object
        """

        self._app_metadata = app_metadata

    @property
    def user_metadata(self) -> object:
        """Gets the user_metadata of this User.


        :return: The user_metadata of this User.
        :rtype: object
        """
        return self._user_metadata

    @user_metadata.setter
    def user_metadata(self, user_metadata: object):
        """Sets the user_metadata of this User.


        :param user_metadata: The user_metadata of this User.
        :type user_metadata: object
        """

        self._user_metadata = user_metadata

    @property
    def connection(self) -> str:
        """Gets the connection of this User.


        :return: The connection of this User.
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection: str):
        """Sets the connection of this User.


        :param connection: The user_metadata of this User.
        :type connection: str
        """

        self._connection = connection

    def to_update_request(self):
        res = self.to_dict()

        return {k: v for k, v in res.items() if v is not None}
