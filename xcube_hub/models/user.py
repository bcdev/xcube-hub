# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from xcube_hub.models.base_model_ import Model
from xcube_hub import util
from xcube_hub.models.identity import Identity

from xcube_hub.models.user_app_metadata import UserAppMetadata
from xcube_hub.models.user_user_metadata import UserUserMetadata


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, email=None, email_verified=None, username=None, created_at=None, updated_at=None,
                 identities=None, app_metadata=None, user_metadata=None, picture=None, name=None, nickname=None,
                 multifactor=None, last_ip=None, last_login=None, logins_count=None, blocked=None, given_name=None,
                 family_name=None, password=None, connection=None):
        """User - a model defined in OpenAPI

        :param user_id: The user_id of this User.  
        :type user_id: str
        :param email: The email of this User.  
        :type email: str
        :param email_verified: The email_verified of this User.  
        :type email_verified: bool
        :param username: The username of this User.  
        :type username: str
        :param created_at: The created_at of this User.  
        :type created_at: datetime
        :param updated_at: The updated_at of this User.  
        :type updated_at: datetime
        :param identities: The identities of this User.  
        :type identities: List[Identity]
        :param app_metadata: The app_metadata of this User.  
        :type app_metadata: AppConfig
        :param user_metadata: The user_metadata of this User.  
        :type user_metadata: Credentials
        :param picture: The picture of this User.  
        :type picture: str
        :param name: The name of this User.  
        :type name: str
        :param nickname: The nickname of this User.  
        :type nickname: str
        :param multifactor: The multifactor of this User.  
        :type multifactor: List[object]
        :param last_ip: The last_ip of this User.  
        :type last_ip: str
        :param last_login: The last_login of this User.  
        :type last_login: str
        :param logins_count: The logins_count of this User.  
        :type logins_count: int
        :param blocked: The blocked of this User.  
        :type blocked: bool
        :param given_name: The given_name of this User.  
        :type given_name: str
        :param family_name: The family_name of this User.  
        :type family_name: str
        :param password: The password of this User.
        :type password: str
        :param connection: The auth connection of this User.
        :type connection: str
        """
        self.openapi_types = {
            'user_id': str,
            'email': str,
            'email_verified': bool,
            'username': str,
            'created_at': datetime,
            'updated_at': datetime,
            'identities': List[Identity],
            'app_metadata': UserAppMetadata,
            'user_metadata': UserUserMetadata,
            'picture': str,
            'name': str,
            'nickname': str,
            'multifactor': List[object],
            'last_ip': str,
            'last_login': str,
            'logins_count': int,
            'blocked': bool,
            'given_name': str,
            'family_name': str,
            'password': str,
            'connection': str
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'email': 'email',
            'email_verified': 'email_verified',
            'username': 'username',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'identities': 'identities',
            'app_metadata': 'app_metadata',
            'user_metadata': 'user_metadata',
            'picture': 'picture',
            'name': 'name',
            'nickname': 'nickname',
            'multifactor': 'multifactor',
            'last_ip': 'last_ip',
            'last_login': 'last_login',
            'logins_count': 'logins_count',
            'blocked': 'blocked',
            'given_name': 'given_name',
            'family_name': 'family_name',
            'password': 'password',
            'connection': 'connection'
        }

        self._user_id = user_id
        self._email = email
        self._email_verified = email_verified
        self._username = username
        self._created_at = created_at
        self._updated_at = updated_at
        self._identities = identities
        self._app_metadata = app_metadata
        self._user_metadata = user_metadata
        self._picture = picture
        self._name = name
        self._nickname = nickname
        self._multifactor = multifactor
        self._last_ip = last_ip
        self._last_login = last_login
        self._logins_count = logins_count
        self._blocked = blocked
        self._given_name = given_name
        self._family_name = family_name
        self._password = password
        self._connection = connection

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this User.


        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this User.


        :return: The email_verified of this User.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this User.


        :param email_verified: The email_verified of this User.
        :type email_verified: bool
        """

        self._email_verified = email_verified

    @property
    def username(self):
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  

        self._username = username

    @property
    def created_at(self):
        """Gets the created_at of this User.


        :return: The created_at of this User.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.


        :param created_at: The created_at of this User.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this User.


        :return: The updated_at of this User.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this User.


        :param updated_at: The updated_at of this User.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def identities(self):
        """Gets the identities of this User.


        :return: The identities of this User.
        :rtype: List[Identity]
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """Sets the identities of this User.


        :param identities: The identities of this User.
        :type identities: List[Identity]
        """

        self._identities = identities

    @property
    def app_metadata(self):
        """Gets the app_metadata of this User.


        :return: The app_metadata of this User.
        :rtype: AppConfig
        """
        return self._app_metadata

    @app_metadata.setter
    def app_metadata(self, app_metadata):
        """Sets the app_metadata of this User.


        :param app_metadata: The app_metadata of this User.
        :type app_metadata: AppConfig
        """

        self._app_metadata = app_metadata

    @property
    def user_metadata(self):
        """Gets the user_metadata of this User.


        :return: The user_metadata of this User.
        :rtype: Credentials
        """
        return self._user_metadata

    @user_metadata.setter
    def user_metadata(self, user_metadata):
        """Sets the user_metadata of this User.


        :param user_metadata: The user_metadata of this User.
        :type user_metadata: Credentials
        """
        if user_metadata is None:
            raise ValueError("Invalid value for `user_metadata`, must not be `None`")  

        self._user_metadata = user_metadata

    @property
    def picture(self):
        """Gets the picture of this User.


        :return: The picture of this User.
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this User.


        :param picture: The picture of this User.
        :type picture: str
        """

        self._picture = picture

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def nickname(self):
        """Gets the nickname of this User.


        :return: The nickname of this User.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this User.


        :param nickname: The nickname of this User.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def multifactor(self):
        """Gets the multifactor of this User.


        :return: The multifactor of this User.
        :rtype: List[object]
        """
        return self._multifactor

    @multifactor.setter
    def multifactor(self, multifactor):
        """Sets the multifactor of this User.


        :param multifactor: The multifactor of this User.
        :type multifactor: List[object]
        """

        self._multifactor = multifactor

    @property
    def last_ip(self):
        """Gets the last_ip of this User.


        :return: The last_ip of this User.
        :rtype: str
        """
        return self._last_ip

    @last_ip.setter
    def last_ip(self, last_ip):
        """Sets the last_ip of this User.


        :param last_ip: The last_ip of this User.
        :type last_ip: str
        """

        self._last_ip = last_ip

    @property
    def last_login(self):
        """Gets the last_login of this User.


        :return: The last_login of this User.
        :rtype: str
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this User.


        :param last_login: The last_login of this User.
        :type last_login: str
        """

        self._last_login = last_login

    @property
    def logins_count(self):
        """Gets the logins_count of this User.


        :return: The logins_count of this User.
        :rtype: int
        """
        return self._logins_count

    @logins_count.setter
    def logins_count(self, logins_count):
        """Sets the logins_count of this User.


        :param logins_count: The logins_count of this User.
        :type logins_count: int
        """

        self._logins_count = logins_count

    @property
    def blocked(self):
        """Gets the blocked of this User.


        :return: The blocked of this User.
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this User.


        :param blocked: The blocked of this User.
        :type blocked: bool
        """

        self._blocked = blocked

    @property
    def given_name(self):
        """Gets the given_name of this User.


        :return: The given_name of this User.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this User.


        :param given_name: The given_name of this User.
        :type given_name: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")  

        self._given_name = given_name

    @property
    def family_name(self):
        """Gets the family_name of this User.


        :return: The family_name of this User.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this User.


        :param family_name: The family_name of this User.
        :type family_name: str
        """
        if family_name is None:
            raise ValueError("Invalid value for `family_name`, must not be `None`")  

        self._family_name = family_name

    @property
    def password(self):
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The family_name of this User.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def connection(self):
        """Gets the connection of this User.


        :return: The connection of this User.
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the family_name of this User.


        :param connection: The family_name of this User.
        :type connection: str
        """
        if connection is None:
            raise ValueError("Invalid value for `connection`, must not be `None`")

        self._connection = connection
