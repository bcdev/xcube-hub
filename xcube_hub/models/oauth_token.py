# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from xcube_hub.models.base_model_ import Model
from xcube_hub import util


class OauthToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id=None, client_secret=None, audience=None, grant_type=None, user_name=None):  # noqa: E501
        """OauthToken - a model defined in OpenAPI

        :param client_id: The client_id of this OauthToken.  # noqa: E501
        :type client_id: str
        :param client_secret: The client_secret of this OauthToken.  # noqa: E501
        :type client_secret: str
        :param audience: The audience of this OauthToken.  # noqa: E501
        :type audience: str
        :param grant_type: The grant_type of this OauthToken.  # noqa: E501
        :type grant_type: str
        :param user_name: The user_name of this OauthToken.  # noqa: E501
        :type user_name: str
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'audience': str,
            'grant_type': str,
            'user_name': str
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'audience': 'audience',
            'grant_type': 'grant_type',
            'user_name': 'user_name'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._audience = audience
        self._grant_type = grant_type
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt) -> 'OauthToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OauthToken of this OauthToken.  # noqa: E501
        :rtype: OauthToken
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this OauthToken.


        :return: The client_id of this OauthToken.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OauthToken.


        :param client_id: The client_id of this OauthToken.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OauthToken.


        :return: The client_secret of this OauthToken.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OauthToken.


        :param client_secret: The client_secret of this OauthToken.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")  # noqa: E501

        self._client_secret = client_secret

    @property
    def audience(self):
        """Gets the audience of this OauthToken.


        :return: The audience of this OauthToken.
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this OauthToken.


        :param audience: The audience of this OauthToken.
        :type audience: str
        """
        if audience is None:
            raise ValueError("Invalid value for `audience`, must not be `None`")  # noqa: E501

        self._audience = audience

    @property
    def grant_type(self):
        """Gets the grant_type of this OauthToken.


        :return: The grant_type of this OauthToken.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this OauthToken.


        :param grant_type: The grant_type of this OauthToken.
        :type grant_type: str
        """
        if grant_type is None:
            raise ValueError("Invalid value for `grant_type`, must not be `None`")  # noqa: E501

        self._grant_type = grant_type

    @property
    def user_name(self):
        """Gets the user_name of this OauthToken.


        :return: The user_name of this OauthToken.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this OauthToken.


        :param user_name: The user_name of this OauthToken.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name
