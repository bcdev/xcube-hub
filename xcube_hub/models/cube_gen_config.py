# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from xcube_hub.models.base_model_ import Model
from xcube_hub.models.cube_gen_config_cube_configs import CubeGenConfigCubeConfigs  # noqa: F401,E501
from xcube_hub.models.cube_gen_config_input_configs import CubeGenConfigInputConfigs  # noqa: F401,E501
from xcube_hub.models.cube_gen_config_output_config import CubeGenConfigOutputConfig  # noqa: F401,E501
from xcube_hub import util


class CubeGenConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, input_configs: List[CubeGenConfigInputConfigs]=None, cube_configs: CubeGenConfigCubeConfigs=None, output_config: CubeGenConfigOutputConfig=None):  # noqa: E501
        """CubeGenConfig - a model defined in Swagger

        :param input_configs: The input_configs of this CubeGenConfig.  # noqa: E501
        :type input_configs: List[CubeGenConfigInputConfigs]
        :param cube_configs: The cube_configs of this CubeGenConfig.  # noqa: E501
        :type cube_configs: CubeGenConfigCubeConfigs
        :param output_config: The output_config of this CubeGenConfig.  # noqa: E501
        :type output_config: CubeGenConfigOutputConfig
        """
        self.swagger_types = {
            'input_configs': List[CubeGenConfigInputConfigs],
            'cube_configs': CubeGenConfigCubeConfigs,
            'output_config': CubeGenConfigOutputConfig
        }

        self.attribute_map = {
            'input_configs': 'input_configs',
            'cube_configs': 'cube_configs',
            'output_config': 'output_config'
        }
        self._input_configs = input_configs
        self._cube_configs = cube_configs
        self._output_config = output_config

    @classmethod
    def from_dict(cls, dikt) -> 'CubeGenConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CubeGenConfig of this CubeGenConfig.  # noqa: E501
        :rtype: CubeGenConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_configs(self) -> List[CubeGenConfigInputConfigs]:
        """Gets the input_configs of this CubeGenConfig.


        :return: The input_configs of this CubeGenConfig.
        :rtype: List[CubeGenConfigInputConfigs]
        """
        return self._input_configs

    @input_configs.setter
    def input_configs(self, input_configs: List[CubeGenConfigInputConfigs]):
        """Sets the input_configs of this CubeGenConfig.


        :param input_configs: The input_configs of this CubeGenConfig.
        :type input_configs: List[CubeGenConfigInputConfigs]
        """
        if input_configs is None:
            raise ValueError("Invalid value for `input_configs`, must not be `None`")  # noqa: E501

        self._input_configs = input_configs

    @property
    def cube_configs(self) -> CubeGenConfigCubeConfigs:
        """Gets the cube_configs of this CubeGenConfig.


        :return: The cube_configs of this CubeGenConfig.
        :rtype: CubeGenConfigCubeConfigs
        """
        return self._cube_configs

    @cube_configs.setter
    def cube_configs(self, cube_configs: CubeGenConfigCubeConfigs):
        """Sets the cube_configs of this CubeGenConfig.


        :param cube_configs: The cube_configs of this CubeGenConfig.
        :type cube_configs: CubeGenConfigCubeConfigs
        """

        self._cube_configs = cube_configs

    @property
    def output_config(self) -> CubeGenConfigOutputConfig:
        """Gets the output_config of this CubeGenConfig.


        :return: The output_config of this CubeGenConfig.
        :rtype: CubeGenConfigOutputConfig
        """
        return self._output_config

    @output_config.setter
    def output_config(self, output_config: CubeGenConfigOutputConfig):
        """Sets the output_config of this CubeGenConfig.


        :param output_config: The output_config of this CubeGenConfig.
        :type output_config: CubeGenConfigOutputConfig
        """
        if output_config is None:
            raise ValueError("Invalid value for `output_config`, must not be `None`")  # noqa: E501

        self._output_config = output_config
