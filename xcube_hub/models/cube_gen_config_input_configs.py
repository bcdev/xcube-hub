# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from xcube_hub.models.base_model_ import Model
from xcube_hub.models.cube_gen_config_open_params import CubeGenConfigOpenParams  # noqa: F401,E501
from xcube_hub import util


class CubeGenConfigInputConfigs(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, store_id: str=None, data_id: str=None, open_params: CubeGenConfigOpenParams=None):  # noqa: E501
        """CubeGenConfigInputConfigs - a model defined in Swagger

        :param store_id: The store_id of this CubeGenConfigInputConfigs.  # noqa: E501
        :type store_id: str
        :param data_id: The data_id of this CubeGenConfigInputConfigs.  # noqa: E501
        :type data_id: str
        :param open_params: The open_params of this CubeGenConfigInputConfigs.  # noqa: E501
        :type open_params: CubeGenConfigOpenParams
        """
        self.swagger_types = {
            'store_id': str,
            'data_id': str,
            'open_params': CubeGenConfigOpenParams
        }

        self.attribute_map = {
            'store_id': 'store_id',
            'data_id': 'data_id',
            'open_params': 'open_params'
        }
        self._store_id = store_id
        self._data_id = data_id
        self._open_params = open_params

    @classmethod
    def from_dict(cls, dikt) -> 'CubeGenConfigInputConfigs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CubeGenConfig_input_configs of this CubeGenConfigInputConfigs.  # noqa: E501
        :rtype: CubeGenConfigInputConfigs
        """
        return util.deserialize_model(dikt, cls)

    @property
    def store_id(self) -> str:
        """Gets the store_id of this CubeGenConfigInputConfigs.


        :return: The store_id of this CubeGenConfigInputConfigs.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id: str):
        """Sets the store_id of this CubeGenConfigInputConfigs.


        :param store_id: The store_id of this CubeGenConfigInputConfigs.
        :type store_id: str
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")  # noqa: E501

        self._store_id = store_id

    @property
    def data_id(self) -> str:
        """Gets the data_id of this CubeGenConfigInputConfigs.


        :return: The data_id of this CubeGenConfigInputConfigs.
        :rtype: str
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id: str):
        """Sets the data_id of this CubeGenConfigInputConfigs.


        :param data_id: The data_id of this CubeGenConfigInputConfigs.
        :type data_id: str
        """
        if data_id is None:
            raise ValueError("Invalid value for `data_id`, must not be `None`")  # noqa: E501

        self._data_id = data_id

    @property
    def open_params(self) -> CubeGenConfigOpenParams:
        """Gets the open_params of this CubeGenConfigInputConfigs.


        :return: The open_params of this CubeGenConfigInputConfigs.
        :rtype: CubeGenConfigOpenParams
        """
        return self._open_params

    @open_params.setter
    def open_params(self, open_params: CubeGenConfigOpenParams):
        """Sets the open_params of this CubeGenConfigInputConfigs.


        :param open_params: The open_params of this CubeGenConfigInputConfigs.
        :type open_params: CubeGenConfigOpenParams
        """
        if open_params is None:
            raise ValueError("Invalid value for `open_params`, must not be `None`")  # noqa: E501

        self._open_params = open_params
