# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from xcube_hub.models.base_model_ import Model
from xcube_hub import util


class Collection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection_id=None, name=None, database=None, href=None, default_style=None, wms_uri=None):
        """Subscription - a model defined in OpenAPI

        :param collection_id: The id of this Collection.  # noqa: E501
        :type collection_id: str
        :param name: The name of this Subscription.  # noqa: E501
        :type name: str
        :param database: The database of this Subscription.  # noqa: E501
        :type database: str
        :param href: The href of this Subscription.  # noqa: E501
        :type href: str
        :param default_style: The default_style of this Subscription.  # noqa: E501
        :type default_style: str
        :param wms_uri: The wms_uri of this Subscription.  # noqa: E501
        :type wms_uri: str
        """
        self.openapi_types = {
            'collection_id': str,
            'name': str,
            'database': str,
            'href': str,
            'default_style': str,
            'wms_uri': str
        }

        self.attribute_map = {
            'collection_id': 'collection_id',
            'name': 'name',
            'database': 'database',
            'href': 'href',
            'default_style': 'default_style',
            'wms_uri': 'wms_uri'
        }

        self._collection_id = collection_id
        self._name = name
        self._database = database
        self._href = href
        self._default_style = default_style
        self._wms_uri = wms_uri

    @classmethod
    def from_dict(cls, dikt) -> 'Collection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Subscription of this Subscription.  # noqa: E501
        :rtype: Subscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_id(self):
        """Gets the collection_id of this Subscription.


        :return: The collection_id of this Subscription.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this Subscription.


        :param collection_id: The collection_id of this Subscription.
        :type collection_id: str
        """

        self._collection_id = collection_id

    @property
    def name(self):
        """Gets the name of this Subscription.


        :return: The name of this Subscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subscription.


        :param name: The name of this Subscription.
        :type name: str
        """

        self._name = name

    @property
    def database(self):
        """Gets the database of this Subscription.


        :return: The database of this Subscription.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this Subscription.


        :param database: The database of this Subscription.
        :type database: str
        """
        if database is None:
            raise ValueError("Invalid value for `database`, must not be `None`")  # noqa: E501

        self._database = database

    @property
    def href(self):
        """Gets the href of this Subscription.


        :return: The href of this Subscription.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Subscription.


        :param href: The href of this Subscription.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def default_style(self):
        """Gets the default_styleof this Subscription.


        :return: The default_styleof this Subscription.
        :rtype: str
        """
        return self._default_style

    @default_style.setter
    def default_style(self, default_style):
        """Sets the default_styleof this Subscription.


        :param default_style: The default_styleof this Subscription.
        :type default_style: str
        """

        self._default_style= default_style

    @property
    def wms_uri(self):
        """Gets the wms_uri of this Subscription.


        :return: The wms_uri of this Subscription.
        :rtype: str
        """
        return self._wms_uri

    @wms_uri.setter
    def wms_uri(self, wms_uri):
        """Sets the wms_uri of this Subscription.


        :param wms_uri: The wms_uri of this Subscription.
        :type wms_uri: str
        """

        self.wms_uri = wms_uri
