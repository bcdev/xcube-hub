# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from xcube_hub.models.base_model_ import Model
from xcube_hub import util


class DataStoreCostParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_pixels_per_punit=None, input_punits_weight=None, output_pixels_per_punit=None, output_punits_weight=None):  # noqa: E501
        """DataStoreCostParams - a model defined in OpenAPI

        :param input_pixels_per_punit: The input_pixels_per_punit of this DataStoreCostParams.  # noqa: E501
        :type input_pixels_per_punit: int
        :param input_punits_weight: The input_punits_weight of this DataStoreCostParams.  # noqa: E501
        :type input_punits_weight: float
        :param output_pixels_per_punit: The output_pixels_per_punit of this DataStoreCostParams.  # noqa: E501
        :type output_pixels_per_punit: int
        :param output_punits_weight: The output_punits_weight of this DataStoreCostParams.  # noqa: E501
        :type output_punits_weight: float
        """
        self.openapi_types = {
            'input_pixels_per_punit': int,
            'input_punits_weight': float,
            'output_pixels_per_punit': int,
            'output_punits_weight': float
        }

        self.attribute_map = {
            'input_pixels_per_punit': 'input_pixels_per_punit',
            'input_punits_weight': 'input_punits_weight',
            'output_pixels_per_punit': 'output_pixels_per_punit',
            'output_punits_weight': 'output_punits_weight'
        }

        self._input_pixels_per_punit = input_pixels_per_punit
        self._input_punits_weight = input_punits_weight
        self._output_pixels_per_punit = output_pixels_per_punit
        self._output_punits_weight = output_punits_weight

    @classmethod
    def from_dict(cls, dikt) -> 'DataStoreCostParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataStore_cost_params of this DataStoreCostParams.  # noqa: E501
        :rtype: DataStoreCostParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_pixels_per_punit(self):
        """Gets the input_pixels_per_punit of this DataStoreCostParams.


        :return: The input_pixels_per_punit of this DataStoreCostParams.
        :rtype: int
        """
        return self._input_pixels_per_punit

    @input_pixels_per_punit.setter
    def input_pixels_per_punit(self, input_pixels_per_punit):
        """Sets the input_pixels_per_punit of this DataStoreCostParams.


        :param input_pixels_per_punit: The input_pixels_per_punit of this DataStoreCostParams.
        :type input_pixels_per_punit: int
        """
        if input_pixels_per_punit is None:
            raise ValueError("Invalid value for `input_pixels_per_punit`, must not be `None`")  # noqa: E501

        self._input_pixels_per_punit = input_pixels_per_punit

    @property
    def input_punits_weight(self):
        """Gets the input_punits_weight of this DataStoreCostParams.


        :return: The input_punits_weight of this DataStoreCostParams.
        :rtype: float
        """
        return self._input_punits_weight

    @input_punits_weight.setter
    def input_punits_weight(self, input_punits_weight):
        """Sets the input_punits_weight of this DataStoreCostParams.


        :param input_punits_weight: The input_punits_weight of this DataStoreCostParams.
        :type input_punits_weight: float
        """
        if input_punits_weight is None:
            raise ValueError("Invalid value for `input_punits_weight`, must not be `None`")  # noqa: E501

        self._input_punits_weight = input_punits_weight

    @property
    def output_pixels_per_punit(self):
        """Gets the output_pixels_per_punit of this DataStoreCostParams.


        :return: The output_pixels_per_punit of this DataStoreCostParams.
        :rtype: int
        """
        return self._output_pixels_per_punit

    @output_pixels_per_punit.setter
    def output_pixels_per_punit(self, output_pixels_per_punit):
        """Sets the output_pixels_per_punit of this DataStoreCostParams.


        :param output_pixels_per_punit: The output_pixels_per_punit of this DataStoreCostParams.
        :type output_pixels_per_punit: int
        """
        if output_pixels_per_punit is None:
            raise ValueError("Invalid value for `output_pixels_per_punit`, must not be `None`")  # noqa: E501

        self._output_pixels_per_punit = output_pixels_per_punit

    @property
    def output_punits_weight(self):
        """Gets the output_punits_weight of this DataStoreCostParams.


        :return: The output_punits_weight of this DataStoreCostParams.
        :rtype: float
        """
        return self._output_punits_weight

    @output_punits_weight.setter
    def output_punits_weight(self, output_punits_weight):
        """Sets the output_punits_weight of this DataStoreCostParams.


        :param output_punits_weight: The output_punits_weight of this DataStoreCostParams.
        :type output_punits_weight: float
        """
        if output_punits_weight is None:
            raise ValueError("Invalid value for `output_punits_weight`, must not be `None`")  # noqa: E501

        self._output_punits_weight = output_punits_weight
