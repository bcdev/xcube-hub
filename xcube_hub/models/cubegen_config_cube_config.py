# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from xcube_hub.models.base_model_ import Model
from xcube_hub import util


class CubegenConfigCubeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, variable_names=None, crs=None, spatial_res=None, bbox=None, time_range=None, time_period=None):  # noqa: E501
        """CubegenConfigCubeConfig - a model defined in OpenAPI

        :param variable_names: The variable_names of this CubegenConfigCubeConfig.  # noqa: E501
        :type variable_names: List[str]
        :param crs: The crs of this CubegenConfigCubeConfig.  # noqa: E501
        :type crs: str
        :param spatial_res: The spatial_res of this CubegenConfigCubeConfig.  # noqa: E501
        :type spatial_res: float
        :param bbox: The bbox of this CubegenConfigCubeConfig.  # noqa: E501
        :type bbox: List[float]
        :param time_range: The time_range of this CubegenConfigCubeConfig.  # noqa: E501
        :type time_range: List[date]
        :param time_period: The time_period of this CubegenConfigCubeConfig.  # noqa: E501
        :type time_period: str
        """
        self.openapi_types = {
            'variable_names': List[str],
            'crs': str,
            'spatial_res': float,
            'bbox': List[float],
            'time_range': List[date],
            'time_period': str
        }

        self.attribute_map = {
            'variable_names': 'variable_names',
            'crs': 'crs',
            'spatial_res': 'spatial_res',
            'bbox': 'bbox',
            'time_range': 'time_range',
            'time_period': 'time_period'
        }

        self._variable_names = variable_names
        self._crs = crs
        self._spatial_res = spatial_res
        self._bbox = bbox
        self._time_range = time_range
        self._time_period = time_period

    @classmethod
    def from_dict(cls, dikt) -> 'CubegenConfigCubeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CubegenConfig_cube_config of this CubegenConfigCubeConfig.  # noqa: E501
        :rtype: CubegenConfigCubeConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def variable_names(self):
        """Gets the variable_names of this CubegenConfigCubeConfig.


        :return: The variable_names of this CubegenConfigCubeConfig.
        :rtype: List[str]
        """
        return self._variable_names

    @variable_names.setter
    def variable_names(self, variable_names):
        """Sets the variable_names of this CubegenConfigCubeConfig.


        :param variable_names: The variable_names of this CubegenConfigCubeConfig.
        :type variable_names: List[str]
        """
        if variable_names is None:
            raise ValueError("Invalid value for `variable_names`, must not be `None`")  # noqa: E501

        self._variable_names = variable_names

    @property
    def crs(self):
        """Gets the crs of this CubegenConfigCubeConfig.


        :return: The crs of this CubegenConfigCubeConfig.
        :rtype: str
        """
        return self._crs

    @crs.setter
    def crs(self, crs):
        """Sets the crs of this CubegenConfigCubeConfig.


        :param crs: The crs of this CubegenConfigCubeConfig.
        :type crs: str
        """
        if crs is None:
            raise ValueError("Invalid value for `crs`, must not be `None`")  # noqa: E501

        self._crs = crs

    @property
    def spatial_res(self):
        """Gets the spatial_res of this CubegenConfigCubeConfig.


        :return: The spatial_res of this CubegenConfigCubeConfig.
        :rtype: float
        """
        return self._spatial_res

    @spatial_res.setter
    def spatial_res(self, spatial_res):
        """Sets the spatial_res of this CubegenConfigCubeConfig.


        :param spatial_res: The spatial_res of this CubegenConfigCubeConfig.
        :type spatial_res: float
        """
        if spatial_res is None:
            raise ValueError("Invalid value for `spatial_res`, must not be `None`")  # noqa: E501

        self._spatial_res = spatial_res

    @property
    def bbox(self):
        """Gets the bbox of this CubegenConfigCubeConfig.


        :return: The bbox of this CubegenConfigCubeConfig.
        :rtype: List[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this CubegenConfigCubeConfig.


        :param bbox: The bbox of this CubegenConfigCubeConfig.
        :type bbox: List[float]
        """
        if bbox is None:
            raise ValueError("Invalid value for `bbox`, must not be `None`")  # noqa: E501

        self._bbox = bbox

    @property
    def time_range(self):
        """Gets the time_range of this CubegenConfigCubeConfig.


        :return: The time_range of this CubegenConfigCubeConfig.
        :rtype: List[date]
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this CubegenConfigCubeConfig.


        :param time_range: The time_range of this CubegenConfigCubeConfig.
        :type time_range: List[date]
        """
        if time_range is None:
            raise ValueError("Invalid value for `time_range`, must not be `None`")  # noqa: E501

        self._time_range = time_range

    @property
    def time_period(self):
        """Gets the time_period of this CubegenConfigCubeConfig.


        :return: The time_period of this CubegenConfigCubeConfig.
        :rtype: str
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this CubegenConfigCubeConfig.


        :param time_period: The time_period of this CubegenConfigCubeConfig.
        :type time_period: str
        """
        if time_period is None:
            raise ValueError("Invalid value for `time_period`, must not be `None`")  # noqa: E501

        self._time_period = time_period
