# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from xcube_hub.models.base_model_ import Model
from xcube_hub import util


class Identity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection=None, user_id=None, provider=None, is_social=None):  # noqa: E501
        """Identity - a model defined in OpenAPI

        :param connection: The connection of this Identity.  # noqa: E501
        :type connection: str
        :param user_id: The user_id of this Identity.  # noqa: E501
        :type user_id: str
        :param provider: The provider of this Identity.  # noqa: E501
        :type provider: str
        :param is_social: The is_social of this Identity.  # noqa: E501
        :type is_social: bool
        """
        self.openapi_types = {
            'connection': str,
            'user_id': str,
            'provider': str,
            'is_social': bool
        }

        self.attribute_map = {
            'connection': 'connection',
            'user_id': 'user_id',
            'provider': 'provider',
            'is_social': 'isSocial'
        }

        self._connection = connection
        self._user_id = user_id
        self._provider = provider
        self._is_social = is_social

    @classmethod
    def from_dict(cls, dikt) -> 'Identity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Identity of this Identity.  # noqa: E501
        :rtype: Identity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection(self):
        """Gets the connection of this Identity.


        :return: The connection of this Identity.
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this Identity.


        :param connection: The connection of this Identity.
        :type connection: str
        """

        self._connection = connection

    @property
    def user_id(self):
        """Gets the user_id of this Identity.


        :return: The user_id of this Identity.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Identity.


        :param user_id: The user_id of this Identity.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def provider(self):
        """Gets the provider of this Identity.


        :return: The provider of this Identity.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Identity.


        :param provider: The provider of this Identity.
        :type provider: str
        """

        self._provider = provider

    @property
    def is_social(self):
        """Gets the is_social of this Identity.


        :return: The is_social of this Identity.
        :rtype: bool
        """
        return self._is_social

    @is_social.setter
    def is_social(self, is_social):
        """Sets the is_social of this Identity.


        :param is_social: The is_social of this Identity.
        :type is_social: bool
        """

        self._is_social = is_social
