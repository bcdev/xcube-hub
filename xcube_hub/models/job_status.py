# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from xcube_hub.models.base_model_ import Model
from xcube_hub import util


class JobStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, logs: List[str]=None, active: bool=None, start_time: datetime=None, failed: bool=None, succeeded: bool=None, completion_time: datetime=None):  # noqa: E501
        """JobStatus - a model defined in Swagger

        :param logs: The logs of this JobStatus.  # noqa: E501
        :type logs: List[str]
        :param active: The active of this JobStatus.  # noqa: E501
        :type active: bool
        :param start_time: The start_time of this JobStatus.  # noqa: E501
        :type start_time: datetime
        :param failed: The failed of this JobStatus.  # noqa: E501
        :type failed: bool
        :param succeeded: The succeeded of this JobStatus.  # noqa: E501
        :type succeeded: bool
        :param completion_time: The completion_time of this JobStatus.  # noqa: E501
        :type completion_time: datetime
        """
        self.swagger_types = {
            'logs': List[str],
            'active': bool,
            'start_time': datetime,
            'failed': bool,
            'succeeded': bool,
            'completion_time': datetime
        }

        self.attribute_map = {
            'logs': 'logs',
            'active': 'active',
            'start_time': 'start_time',
            'failed': 'failed',
            'succeeded': 'succeeded',
            'completion_time': 'completion_time'
        }
        self._logs = logs
        self._active = active
        self._start_time = start_time
        self._failed = failed
        self._succeeded = succeeded
        self._completion_time = completion_time

    @classmethod
    def from_dict(cls, dikt) -> 'JobStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobStatus of this JobStatus.  # noqa: E501
        :rtype: JobStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logs(self) -> List[str]:
        """Gets the logs of this JobStatus.


        :return: The logs of this JobStatus.
        :rtype: List[str]
        """
        return self._logs

    @logs.setter
    def logs(self, logs: List[str]):
        """Sets the logs of this JobStatus.


        :param logs: The logs of this JobStatus.
        :type logs: List[str]
        """

        self._logs = logs

    @property
    def active(self) -> bool:
        """Gets the active of this JobStatus.


        :return: The active of this JobStatus.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this JobStatus.


        :param active: The active of this JobStatus.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def start_time(self) -> datetime:
        """Gets the start_time of this JobStatus.


        :return: The start_time of this JobStatus.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: datetime):
        """Sets the start_time of this JobStatus.


        :param start_time: The start_time of this JobStatus.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def failed(self) -> bool:
        """Gets the failed of this JobStatus.


        :return: The failed of this JobStatus.
        :rtype: bool
        """
        return self._failed

    @failed.setter
    def failed(self, failed: bool):
        """Sets the failed of this JobStatus.


        :param failed: The failed of this JobStatus.
        :type failed: bool
        """
        if failed is None:
            raise ValueError("Invalid value for `failed`, must not be `None`")  # noqa: E501

        self._failed = failed

    @property
    def succeeded(self) -> bool:
        """Gets the succeeded of this JobStatus.


        :return: The succeeded of this JobStatus.
        :rtype: bool
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded: bool):
        """Sets the succeeded of this JobStatus.


        :param succeeded: The succeeded of this JobStatus.
        :type succeeded: bool
        """
        if succeeded is None:
            raise ValueError("Invalid value for `succeeded`, must not be `None`")  # noqa: E501

        self._succeeded = succeeded

    @property
    def completion_time(self) -> datetime:
        """Gets the completion_time of this JobStatus.


        :return: The completion_time of this JobStatus.
        :rtype: datetime
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time: datetime):
        """Sets the completion_time of this JobStatus.


        :param completion_time: The completion_time of this JobStatus.
        :type completion_time: datetime
        """
        if completion_time is None:
            raise ValueError("Invalid value for `completion_time`, must not be `None`")  # noqa: E501

        self._completion_time = completion_time
