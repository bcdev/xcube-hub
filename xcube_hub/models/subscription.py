# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from xcube_hub.models.base_model_ import Model
from xcube_hub import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription_id=None, plan='free', email=None, guid=None, client_id=None, client_secret=None,
                 units=0.0, unit='punits', first_name=None, last_name=None, start_date=None, role=None):  # noqa: E501
        """Subscription - a model defined in OpenAPI

        :param subscription_id: The subscription_id of this Subscription.  # noqa: E501
        :type subscription_id: str
        :param plan: The plan of this Subscription.  # noqa: E501
        :type plan: str
        :param email: The email of this Subscription.  # noqa: E501
        :type email: str
        :param guid: The guid of this Subscription.  # noqa: E501
        :type guid: str
        :param client_id: The client_id of this Subscription.  # noqa: E501
        :type client_id: str
        :param client_secret: The client_secret of this Subscription.  # noqa: E501
        :type client_secret: str
        :param units: The units of this Subscription.  # noqa: E501
        :type units: float
        :param unit: The unit of this Subscription.  # noqa: E501
        :type unit: str
        :param first_name: The first_name of this Subscription.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this Subscription.  # noqa: E501
        :type last_name: str
        :param start_date: The start_date of this Subscription.  # noqa: E501
        :type start_date: str
        :param role: The role of this Subscription.  # noqa: E501
        :type role: str
        """
        self.openapi_types = {
            'subscription_id': str,
            'plan': str,
            'email': str,
            'guid': str,
            'client_id': str,
            'client_secret': str,
            'units': float,
            'unit': str,
            'first_name': str,
            'last_name': str,
            'start_date': str,
            'role': str
        }

        self.attribute_map = {
            'subscription_id': 'subscription_id',
            'plan': 'plan',
            'email': 'email',
            'guid': 'guid',
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'units': 'units',
            'unit': 'unit',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'start_date': 'start_date',
            'role': 'role'
        }

        self._subscription_id = subscription_id
        self._plan = plan
        self._email = email
        self._guid = guid
        self._client_id = client_id
        self._client_secret = client_secret
        self._units = units
        self._unit = unit
        self._first_name = first_name
        self._last_name = last_name
        self._start_date = start_date
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Subscription of this Subscription.  # noqa: E501
        :rtype: Subscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription_id(self):
        """Gets the subscription_id of this Subscription.


        :return: The subscription_id of this Subscription.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this Subscription.


        :param subscription_id: The subscription_id of this Subscription.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def plan(self):
        """Gets the plan of this Subscription.


        :return: The plan of this Subscription.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Subscription.


        :param plan: The plan of this Subscription.
        :type plan: str
        """

        self._plan = plan

    @property
    def email(self):
        """Gets the email of this Subscription.


        :return: The email of this Subscription.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Subscription.


        :param email: The email of this Subscription.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def guid(self):
        """Gets the guid of this Subscription.


        :return: The guid of this Subscription.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this Subscription.


        :param guid: The guid of this Subscription.
        :type guid: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")  # noqa: E501

        self._guid = guid

    @property
    def client_id(self):
        """Gets the client_id of this Subscription.


        :return: The client_id of this Subscription.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Subscription.


        :param client_id: The client_id of this Subscription.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this Subscription.


        :return: The client_secret of this Subscription.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this Subscription.


        :param client_secret: The client_secret of this Subscription.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def units(self):
        """Gets the units of this Subscription.


        :return: The units of this Subscription.
        :rtype: float
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Subscription.


        :param units: The units of this Subscription.
        :type units: float
        """

        self._units = units

    @property
    def unit(self):
        """Gets the unit of this Subscription.


        :return: The unit of this Subscription.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Subscription.


        :param unit: The unit of this Subscription.
        :type unit: str
        """
        allowed_values = ["punits", "cells", "euro", "n/a"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}".format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def first_name(self):
        """Gets the first_name of this Subscription.


        :return: The first_name of this Subscription.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Subscription.


        :param first_name: The first_name of this Subscription.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Subscription.


        :return: The last_name of this Subscription.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Subscription.


        :param last_name: The last_name of this Subscription.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def start_date(self):
        """Gets the start_date of this Subscription.


        :return: The start_date of this Subscription.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Subscription.


        :param start_date: The last_name of this Subscription.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def role(self):
        """Gets the role of this Subscription.


        :return: The role of this Subscription.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Subscription.


        :param role: The last_name of this Subscription.
        :type role: str
        """

        self._role = role
